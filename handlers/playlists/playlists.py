from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InputFile, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pathlib import Path

from sqlalchemy.sql.functions import count

from sources.postgres.sql_requests import (
    rename_playlist,
    delete_playlist,
    remove_song_from_playlist,
    create_playlist,
    get_all_playlists, rebase_song_from_playlist
)
from states.states_playlists import PlaylistsStates

router = Router()

"""sample = {"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ": [
   {id: 1,
    "–Ω–∞–∑–≤–∞–Ω–∏–µ": "Three little birds",
    "–ø—É—Ç—å": "sources/audio/bob-marley-the-wailers-three-little-birds.mp3"
    },
    {   id: 2,
    "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–Ø–º–∞–π–∫–∞",
    "–ø—É—Ç—å": "sources/audio/Comedoz - –Ø–º–∞–π–∫–∞.mp3"
    }
]
}"""

#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
@router.message(F.text.endswith("–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã"))
async def start_recommendations(message: types.Message, state: FSMContext):

    # –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    user_id = message.from_user.id
    playlists = get_all_playlists(user_id)


    await state.update_data(playlists=playlists)

    markup = InlineKeyboardBuilder()
    create = types.InlineKeyboardButton(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="create"
    )
    markup.add(create)
    for name in playlists.keys():
        markup.add(types.InlineKeyboardButton(text = str(name), callback_data= str(name)))
    markup.adjust(1, 1)


    sent_message = await message.answer(text="–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:", reply_markup=markup.as_markup())
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(PlaylistsStates.choose_playlist)


#—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@router.callback_query(F.data == "create", PlaylistsStates.choose_playlist)
async def create(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    await callback.message.edit_text(text=mes_text)

    await state.set_state(PlaylistsStates.create_playlist)


@router.message(F.text, PlaylistsStates.create_playlist)
async def create(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    data = await state.get_data()
    playlists = data['playlists']
    if text not in playlists:
        ok = create_playlist(user_id, text)
        if not ok:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        else:
            mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç {message.text} —Å–æ–∑–¥–∞–Ω"
            await message.answer(text=mes_text)
    else:
        await message.answer(text="–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    await state.set_state(PlaylistsStates.action)


@router.callback_query(PlaylistsStates.choose_playlist)
async def playlist_menu(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'create':
        return

    name_playlist = callback.data
    await state.update_data(name_playlist=name_playlist)
    data = await state.get_data()
    playlists = data['playlists']

    markup = InlineKeyboardBuilder()
    listen = types.InlineKeyboardButton(
        text="üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="listen"
    )
    edit = types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="edit"
    )
    markup.add(listen, edit,)
    markup.adjust(1, 1)

    songs = ""
    count = 0
    if len(playlists[name_playlist]) != 0:
        for name in playlists[name_playlist]:
            count += 1
            songs += f"\n{count}: {name['–Ω–∞–∑–≤–∞–Ω–∏–µ']}"
        await callback.message.edit_text(text=f"{songs}", reply_markup=markup.as_markup())
        await state.set_state(PlaylistsStates.choose_action)
    else:
        await callback.message.edit_text(text=f"–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç")


#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "edit", PlaylistsStates.choose_action)
async def edit_menu(callback: types.CallbackQuery, state: FSMContext):
    markup = InlineKeyboardBuilder()
    data = await state.get_data()
    edit_songs = types.InlineKeyboardButton(
        text="üéµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Å–Ω–∏",
        callback_data="edit_songs"
    )
    markup.add( edit_songs)

    #–ë–∞–∑–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å
    if data['name_playlist'] != '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        delete = types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
            callback_data="delete"
        )
        rename = types.InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data="rename"
        )
        markup.add(delete, rename)
        markup.adjust(1, 1)

    await callback.message.edit_text(text="–í—ã–±–∏—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.wait_choose)

#–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "rename", PlaylistsStates.wait_choose)
async def rename(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    await callback.message.edit_text(text=mes_text)
    await state.set_state(PlaylistsStates.rename)

@router.message(F.text, PlaylistsStates.rename)
async def rename(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    data = await state.get_data()
    try:
        ok = rename_playlist(data['name_playlist'], message.text, user_id)
        if not ok:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        else:
            mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –Ω–∞ {message.text}"
            await message.answer(text=mes_text)
    except KeyError:
        await message.answer(text="–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç")

    await state.set_state(PlaylistsStates.action)


#—É–¥–∞–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@router.callback_query(F.data == "delete", PlaylistsStates.wait_choose)
async def delete(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    name_playlist = data['name_playlist']
    mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç {data['name_playlist']} —É–¥–∞–ª–µ–Ω"
    try:
        ok = delete_playlist(data['name_playlist'], user_id)
        if not ok:
            await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        else:
            await callback.message.edit_text(text=mes_text)
    except KeyError:
        await callback.message.edit_text(text="–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç")

    await state.set_state(PlaylistsStates.action)


#—Ä–µ–¥–∞–∫—Ç—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å–µ–Ω
@router.callback_query(F.data == "edit_songs", PlaylistsStates.wait_choose)
async def edit_songs(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name_playlist = data['name_playlist']
    markup = InlineKeyboardBuilder()
    delete_songs = types.InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω–∏",
        callback_data="delete_songs"
    )
    rebase_song = types.InlineKeyboardButton(
        text="üéµ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–µ—Å–Ω–∏",
        callback_data="rebase_song"
    )
    markup.add(delete_songs, rebase_song)
    markup.adjust(1, 1)
    await callback.message.edit_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º {name_playlist}", reply_markup = markup.as_markup())
    await state.set_state(PlaylistsStates.edit_songs)


#—É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏
@router.callback_query(F.data == "delete_songs", PlaylistsStates.edit_songs)
async def rename(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    playlists = data['playlists']
    name_playlist = data['name_playlist']
    count = 0
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –ø–µ—Å–Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
    for name in playlists[name_playlist]:
        count += 1
        mes_text += f"\n{count}: {name['–Ω–∞–∑–≤–∞–Ω–∏–µ']}"

    await callback.message.edit_text(text=mes_text)
    await state.set_state(PlaylistsStates.edit_songs)


@router.message(F.text, PlaylistsStates.edit_songs)
async def delete_songs(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    name_playlist = data['name_playlist']
    playlists = data['playlists']
    ind = message.text
    try:
        if 0 <= int(ind) - 1 < len(playlists[name_playlist]):
            name_song = playlists[name_playlist][int(ind) - 1]['–Ω–∞–∑–≤–∞–Ω–∏–µ']
            ok = remove_song_from_playlist(data['name_playlist'], user_id, name_song)
            if not ok:
                await message.answer("–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
            else:
                mes_text = f"–ü–µ—Å–Ω—è —É–¥–∞–ª–µ–Ω–∞"
                await message.answer(text=mes_text)

    except Exception as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞:{e}")
        return

    await state.set_state(PlaylistsStates.action)



#—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Å–µ–Ω –º–µ–∂–¥—É –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
@router.callback_query(F.data == "rebase_song", PlaylistsStates.edit_songs)
async def rebase_song(callback: types.CallbackQuery, state: FSMContext):
    markup = InlineKeyboardBuilder()
    data = await state.get_data()
    playlists = data['playlists']
    name_playlist = data['name_playlist']
    mes_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–µ—Å–Ω—é"
    for name in playlists.keys():
        if name != name_playlist:
            markup.add(types.InlineKeyboardButton(text = str(name), callback_data= str(name)))
    markup.adjust(1, 1)
    await callback.message.edit_text(text=mes_text, reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.rebase_song)


@router.callback_query(PlaylistsStates.rebase_song)
async def rebase_song(callback: types.CallbackQuery, state: FSMContext):
    new_playlist = callback.data
    await state.update_data(new_playlist=new_playlist)
    data = await state.get_data()
    data.update()
    playlists = data['playlists']
    old_playlists = data['name_playlist']
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"
    count = 0
    for name in playlists[old_playlists]:
        count += 1
        mes_text += f"\n{count}: {name['–Ω–∞–∑–≤–∞–Ω–∏–µ']}"

    await callback.message.edit_text(text=mes_text)
    await state.set_state(PlaylistsStates.rebase_song)

@router.message(PlaylistsStates.rebase_song)
async def rebase_song(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        new_playlist = data['new_playlist']
        old_playlists = data['name_playlist']
        song_name = message.text
        ok = rebase_song_from_playlist(song_name, new_playlist, old_playlists)
        if not ok:
            await message.answer("–ü—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        else:
            mes_text = f"–ü–µ—Å–Ω—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç {new_playlist}"
            await message.answer(text=mes_text)
    except KeyError as e:
        await message.answer(text="–¢–∞–∫–æ–π –ø–µ—Å–Ω–∏ –Ω–µ—Ç")


#–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–µ—Å–µ–Ω
@router.callback_query(F.data == "listen", PlaylistsStates.choose_action)
async def listen_menu(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    playlists = data['playlists']
    markup = InlineKeyboardBuilder()
    sequential = types.InlineKeyboardButton(
        text="‚ñ∂Ô∏è –ü–æ –ø–æ—Ä—è–¥–∫—É",
        callback_data="sequential"
    )
    shuffle = types.InlineKeyboardButton(
        text="üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å",
        callback_data="shuffle"
    )
    markup.add(shuffle, sequential)
    markup.adjust(1, 1)

    songs = ""
    for song in playlists[data['name_playlist']]:
        songs += f"\n{song['–Ω–∞–∑–≤–∞–Ω–∏–µ']}"
    await callback.message.edit_text(text=songs, reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.wait_choose)


async def send_audio_message(message: types.Message, track: dict, markup: InlineKeyboardBuilder):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        file_path = Path(track['–ø—É—Ç—å'])
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {track['–ø—É—Ç—å']} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return await message.answer_audio(
            audio=FSInputFile(file_path),
            title=track.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            performer=track.get('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'),
            reply_markup=markup.as_markup()
        )
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await message.answer(error_message)
        return None


@router.callback_query(F.data.in_({"sequential", "shuffle"}), PlaylistsStates.wait_choose)
async def change_song(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    playlists = data['playlists']
    order = callback.data

    original_tracks = data.get('original_list', playlists[data['name_playlist']].copy())
    tracks = original_tracks.copy()

    if order == 'shuffle':
        import random
        random.shuffle(tracks)

    await state.update_data(
        page=0,
        current_list=tracks,
        original_list=original_tracks,
        items_per_page=10  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    )

    new_data = await state.get_data()
    track_list = new_data['current_list']
    page = new_data.get('page', 0)
    per_page = new_data['items_per_page']

    markup = InlineKeyboardBuilder()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç—Ä–µ–∫–æ–≤
    start = page * per_page
    end = start + per_page
    current_page_tracks = track_list[start:end]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for idx, track in enumerate(current_page_tracks, start=1):
        markup.button(
            text=f"{idx}. {track['–Ω–∞–∑–≤–∞–Ω–∏–µ'][:15]}",
            callback_data=f"track_{start + idx - 1}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        markup.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"prev_page_{page - 1}")
    if end < len(track_list):
        markup.button(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_page_{page + 1}")

    markup.adjust(2, repeat=True)

    try:
        await callback.message.delete()
        await callback.message.answer(
            f"üéß –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:",
            reply_markup=markup.as_markup()
        )
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("track_"), PlaylistsStates.wait_choose)
async def play_selected_track(callback: types.CallbackQuery, state: FSMContext):
    track_index = int(callback.data.split("_")[1])
    data = await state.get_data()
    track_list = data['current_list']

    markup = InlineKeyboardBuilder()
    try:
        current_track = track_list[track_index]
        await send_audio_message(callback.message, current_track, markup)
    except IndexError:
        await callback.message.answer("üö´ –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.callback_query(F.data.startswith("prev_page_"), PlaylistsStates.wait_choose)
@router.callback_query(F.data.startswith("next_page_"), PlaylistsStates.wait_choose)
async def navigate_pages(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    track_list = data['current_list']
    per_page = data['items_per_page']
    action = callback.data.split("_")[:2]
    page = callback.data.split("_")[2]
    print(callback.data)
    print(action, page)
    new_page = int(page)

    await state.update_data(page=new_page)

    markup = InlineKeyboardBuilder()
    start = new_page * per_page
    end = start + per_page
    current_page_tracks = track_list[start:end]

    for idx, track in enumerate(current_page_tracks, start=1):
        markup.button(
            text=f"{idx}. {track['–Ω–∞–∑–≤–∞–Ω–∏–µ'][:15]}",
            callback_data=f"track_{start + idx - 1}"
        )

    if new_page > 0:
        markup.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"prev_page_{new_page - 1}")
    if end < len(track_list):
        markup.button(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_page_{new_page + 1}")

    markup.adjust(2, repeat=True)

    try:
        await callback.message.edit_text(
            f"üéß –°—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page + 1}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:",
            reply_markup=markup.as_markup()
        )
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
