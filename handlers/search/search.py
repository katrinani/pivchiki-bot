import os
from os import remove
from aiogram import F, types, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sources.search.search import find_most_similar_song, extract_features, to_svd
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
from states.states_search import SearchStates
# –ø–∞—Ä—Å–µ—Ä –∏–∑ —é—Ç—É–±–∞
from sources.parsers.YouTubeBomber import find_in_youtube, download_song, change_variable
# –º–µ—Ç–æ–¥—ã –±–¥
from sources.postgres.sql_requests import save_search_history, save_mp3, rebase_song_from_playlist

router = Router()


@router.message(F.text.endswith("–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"))
async def start_search(message: types.Message, state: FSMContext):

    markup = InlineKeyboardBuilder()
    by_text = types.InlineKeyboardButton(
        text="‚úçÔ∏è –ü–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–≤–æ–¥—É",
        callback_data="text"
    )
    by_audio = types.InlineKeyboardButton(
        text="üé§ –ü–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é",
        callback_data="audio"
    )
    markup.add(by_text, by_audio)
    markup.adjust(1, 1)

    sent_message = await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=markup.as_markup())
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(SearchStates.choose_method)


# —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç
@router.callback_query(F.data == "text", SearchStates.choose_method)
async def get_info_about_song(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ü—Ä–∏–Ω—è—Ç–æ! –¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏/–∏–ª–∏ –∞–≤—Ç–æ—Ä–∞:"

    markup = InlineKeyboardBuilder()
    cansel = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
        callback_data="cansel"
    )
    markup.add(cansel)

    await callback.message.edit_text(text=mes_text, reply_markup=markup.as_markup())
    await state.set_state(SearchStates.wait_info_about_song)

@router.message(F.text, SearchStates.wait_info_about_song)
async def request_processing(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–¥ –∑–∞–ø—Ä–æ—Å –∏ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    user_id = message.from_user.id
    save_search_history(user_id, message.text)
    change_variable(message.text)

    sent_message = await message.answer("–ò—â—É! –ú–∏–Ω—É—Ç–∫—É...")
    await state.update_data(search_message_id=sent_message.message_id)

    answer = find_in_youtube(message.text)
    if not answer[0]:
        await message.answer(answer[1])
        return

    result = answer[1]
    data = answer[2]
    count = answer[3]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
    await state.update_data({"result": data})

    markup = InlineKeyboardBuilder()
    for i in range(count):
        btn = types.InlineKeyboardButton(
            text=f"{i + 1}",
            callback_data=f"song_{i + 1}"
        )
        markup.add(btn)
    cansel = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
        callback_data="cansel"
    )
    markup.add(cansel)

    markup.adjust(5, 5, 1)

    data = await state.get_data()
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data["search_message_id"],
        text=result,
        reply_markup=markup.as_markup()
    )
    await state.set_state(SearchStates.send_song)


@router.callback_query(F.data == "cansel")
async def cansel_search(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–º–µ–Ω—è—é –ø–æ–∏—Å–∫")
    await state.clear()


@router.callback_query(
    F.data.in_([f"song_{i + 1}" for i in range(10)]),
    SearchStates.send_song
)
async def send_song(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –ó–∞–≥—Ä—É–∂–∞—é...")
    data = await state.get_data()
    result = data["result"]

    path = "sources\\songs"

    success, track_data, title = download_song(result, int(callback.data[-1]), path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not success:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –µ—â–µ —Ä–∞–∑")
        return

    filename = os.path.join(path, f"{track_data['title']}.mp3")
    mp3_path = f"{filename}.mp3"

    print(title)

    markup = InlineKeyboardBuilder()
    markup.add(types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
        callback_data=f"add_song:{title}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
    ))

    file = FSInputFile(mp3_path)
    await callback.message.answer_audio(file, reply_markup=markup.as_markup())
    await state.clear()


# —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥—Å
@router.callback_query(F.data == "audio", SearchStates.choose_method)
async def get_voice(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–•–æ—Ä–æ—à–æ! –¢–æ–≥–¥–∞ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –±—É–¥–µ—Ç —Å–ª—ã—à–Ω–æ –ø–µ—Å–Ω—é, –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 30 —Å–µ–∫."

    markup = InlineKeyboardBuilder()
    cansel = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
        callback_data="cansel"
    )
    markup.add(cansel)

    await callback.message.edit_text(text=mes_text, reply_markup=markup.as_markup())
    await state.set_state(SearchStates.wait_audio)


@router.message(F.voice, SearchStates.wait_audio)
async def voice_processing(message: types.Message, state: FSMContext, bot: Bot):
    await message.answer("–£—Å–ª—ã—à–∞–ª –≤–∞—Å. –£–∂–µ –∏—â—É!")
    file_path = f"{message.voice.file_id}.ogg"
    await bot.download(message.voice.file_id, destination=file_path)

    nearest_song, best_name, max_similarity = find_most_similar_song(file_path)
    print(best_name)

    if nearest_song == "":
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫"
        await message.answer(text=text)
        await state.clear()

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–¥ –∑–∞–ø—Ä–æ—Å –∏ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    user_id = message.from_user.id
    save_search_history(user_id, best_name)

    markup = InlineKeyboardBuilder()
    markup.add(types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
        callback_data=f"add_song:{best_name}"
    ))

    file = FSInputFile(nearest_song)
    mes_text = f"–Ø –Ω–∞—à–µ–ª:\n{best_name}"
    await message.answer_audio(file, caption=mes_text, reply_markup=markup.as_markup())
    remove(file_path)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–µ—Å–Ω–∏
    await state.update_data({"song_name": file.filename})
    await state.clear()



@router.message(SearchStates.wait_audio)
async def voice_processing(message: types.Message, state: FSMContext):
    mes_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞"
    await message.answer(text=mes_text)
    await state.set_state(SearchStates.wait_audio)


@router.callback_query(F.data.startswith("add_song:"))
async def add_new_song(callback: types.CallbackQuery, state: FSMContext):
    song_name = callback.data.split(":")[1]

    ok = rebase_song_from_playlist(callback.message.from_user.id, song_name, "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    if not ok:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Å–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –µ—â–µ —Ä–∞–∑")
    else:
        mes_text = f"–ü–µ—Å–Ω—è {song_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'"
        await callback.message.answer(text=mes_text)